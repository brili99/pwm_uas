// TODO: harus tambah service worker

let db;
const dbName = "jadwalAdzanDB";

function get_url_jadwal_adzan(kota) {
  const now = new Date();
  const formattedDate = `${now.getFullYear()}/${String(
    now.getMonth() + 1
  ).padStart(2, "0")}`;
  return `https://raw.githubusercontent.com/lakuapik/jadwalsholatorg/master/adzan/${kota}/${formattedDate}.json`;
}

function openDatabase(callback) {
  // const request = indexedDB.open(dbName, 1);
  const new_ver = Date.now();
  console.log("Open db with version", new_ver);
  const request = indexedDB.open(dbName, new_ver);

  request.onupgradeneeded = (event) => {
    db = event.target.result;
    console.log("Upgrading database...");
    // Create the default store if needed
    if (!db.objectStoreNames.contains("register_kota")) {
      db.createObjectStore("register_kota", {
        keyPath: "id",
        autoIncrement: true,
      });
    }
    if (callback) callback();
  };

  request.onsuccess = (event) => {
    db = event.target.result;
    if (callback) callback();
  };

  request.onerror = (event) => {
    // console.error(`Database error: ${event.target.errorCode}`);
    console.error(event.target);
  };
}

async function ensureObjectStore(storeName) {
  if (!db.objectStoreNames.contains(storeName)) {
    db.close();

    const request = indexedDB.open(dbName, db.version + 1);

    request.onupgradeneeded = (event) => {
      db = event.target.result;
      if (!db.objectStoreNames.contains(storeName)) {
        db.createObjectStore(storeName, { keyPath: "id", autoIncrement: true });
      }
    };

    return new Promise((resolve, reject) => {
      request.onsuccess = (event) => {
        db = event.target.result;
        resolve();
      };

      request.onerror = (event) => {
        reject(`Database error: ${event.target.errorCode}`);
      };
    });
  }
}

async function prevent_submit(event_form) {
  event_form.preventDefault();
  const selected_new_kota = document.getElementById("select_kota").value;
  console.log("Tambah jadwal kota", selected_new_kota);

  const obj_name_jadwal = "jadwal_" + selected_new_kota;

  // Open the database and wait for it to be ready
  openDatabase(async () => {
    console.log("Db oppened...");
    // Ensure the object store exists
    await ensureObjectStore(obj_name_jadwal);

    try {
      let jadwal_adzan_kota = await getDataFromDB(obj_name_jadwal);
      if (!jadwal_adzan_kota.length) {
        console.log("Data not found in IndexedDB, fetching from URL...");
        jadwal_adzan_kota = await fetchDataAndStore(
          get_url_jadwal_adzan(selected_new_kota),
          obj_name_jadwal
        );
      }
      console.log(jadwal_adzan_kota);
    } catch (error) {
      console.error("Error:", error);
    }

    db.close();
  });
}

function getDataFromDB(storeName) {
  return new Promise((resolve, reject) => {
    const transaction = db.transaction([storeName], "readonly");
    const objectStore = transaction.objectStore(storeName);
    const request = objectStore.getAll();

    request.onsuccess = (event) => {
      resolve(event.target.result);
    };

    request.onerror = (event) => {
      reject(`Error fetching data: ${event.target.errorCode}`);
    };
  });
}

async function fetchDataAndStore(url, storeName) {
  const response = await fetch(url);
  const data = await response.json();

  const transaction = db.transaction([storeName], "readwrite");
  const objectStore = transaction.objectStore(storeName);

  data.forEach((item) => {
    objectStore.put(item); // Use put instead of add
  });

  return data;
}
